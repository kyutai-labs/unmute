services:
  traefik:
    image: traefik:v3.3.1
    command:
      # Swarm provider configuration
      - "--providers.swarm.endpoint=unix:///var/run/docker.sock"
      - "--providers.swarm.exposedByDefault=false"

      # EntryPoints for HTTP and HTTPS
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # Redirect HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"

      # Enable Let's Encrypt with ACME, enable when you want
      - "--certificatesResolvers.letsencrypt_resolver.acme.httpChallenge.entryPoint=web"
      - "--certificatesResolvers.letsencrypt_resolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesResolvers.letsencrypt_resolver.acme.email=gabriel@kyutai.org"
      - "--certificatesResolvers.letsencrypt_resolver.acme.httpChallenge=true"
      # staging environment to avoid rate limiting
      #- "--certificatesResolvers.letsencrypt_resolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"

      # Enable dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--metrics.prometheus=true"
      - "--log.level=DEBUG"
      # Healthcheck
      - "--ping=true"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt" # Persistent storage for SSL certificates
    deploy:
      update_config:
        order: start-first # Since we can't have multiple replicas, at least we can start the new container first.
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.rule=Host(`traefik-delicious-burrito.${DOMAIN}`)"
        - "traefik.http.routers.traefik.middlewares=traefik-forward-auth"
        - "traefik.http.routers.traefik.entrypoints=websecure"
        - "traefik.http.routers.traefik.tls=true"
        - "traefik.http.routers.traefik.tls.certresolver=letsencrypt_resolver"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"
        - "prometheus-port=8080"
      placement:
        constraints:
          - node.role == manager

  frontend:
    image: rg.fr-par.scw.cloud/namespace-unruffled-tereshkova/${DOMAIN}-frontend:latest
    build:
      context: frontend/
    deploy:
      replicas: 5
      update_config:
        delay: 10s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`www.${DOMAIN}`) || Host(`${DOMAIN}`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls=true"
        - "traefik.http.routers.frontend.tls.certresolver=letsencrypt_resolver"
        - "traefik.http.services.frontend.loadbalancer.server.port=3000"
        - "traefik.http.routers.frontend.priority=10" # lowest priority

  workers:
    image: rg.fr-par.scw.cloud/namespace-unruffled-tereshkova/${DOMAIN}-workers:latest
    build:
      context: ./
      target: prod
    environment:
      - KYUTAI_STT_URL=ws://tasks.stt:8080
      - KYUTAI_TTS_URL=ws://tasks.tts:8080
      - KYUTAI_LLM_URL=http://llm:8000
      - KYUTAI_VOICE_CLONING_URL=http://voice-cloning:8080
      - KYUTAI_REDIS_URL=redis://redis:6379
      - KYUTAI_VOICE_DONATION_DIR=/voice-donation
      - NEWSAPI_API_KEY=$NEWSAPI_API_KEY
    volumes:
      - /scratch/voice-donation/:/voice-donation
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.workers.rule=(Host(`www.${DOMAIN}`) || Host(`${DOMAIN}`)) && PathPrefix(`/api`)"
        - "traefik.http.routers.workers.middlewares=strip-api"
        - "traefik.http.middlewares.strip-api.replacepathregex.regex=^/api/(.*)"
        - "traefik.http.middlewares.strip-api.replacepathregex.replacement=/$$1"
        - "traefik.http.routers.workers.entrypoints=websecure"
        - "traefik.http.routers.workers.tls=true"
        - "traefik.http.routers.workers.tls.certresolver=letsencrypt_resolver"
        - "traefik.http.services.workers.loadbalancer.server.port=80"
        - "traefik.http.routers.workers.priority=100" # higher priority than frontend
        - "prometheus-port=80"
      replicas: 16
      update_config:
        delay: 10s
        parallelism: 3
      resources:
        limits:
          cpus: "1.5"
          memory: 1G

  tts:
    image: rg.fr-par.scw.cloud/namespace-unruffled-tereshkova/${DOMAIN}-moshi-server:latest
    command: ["worker", "--config", "configs/tts-py.toml"]
    build:
      context: services/moshi-server
      ssh:                          # Only needed for staging
        - default                   # Only needed for staging
      args:                         # Only needed for staging
        GITHUB_ORG: $GITHUB_ORG     # Only needed for staging
    environment:
      - TTS_CONFIG=/app/configs/tts.toml
      - HUGGING_FACE_HUB_TOKEN=$HUGGING_FACE_HUB_TOKEN
      - HF_TOKEN=$HUGGING_FACE_HUB_TOKEN
    volumes:
      - cargo-registry:/root/.cargo/registry
      - moshi-server-target:/app/target
      - uv-cache:/root/.cache/uv
      - hf-cache:/root/.cache/huggingface/hub
      - /scratch/models/:/models
      - tts-logs:/logs
    stop_grace_period: 10s # change if needed
    deploy:
      labels:
        - "prometheus-port=8080"
      replicas: 3
      update_config:
        delay: 60s # it takes a very long time to boot up and we want no downtime
      resources:
        limits:
          cpus: "8"
          memory: 16G
        reservations:
          generic_resources:
            - discrete_resource_spec:
                kind: gpu
                value: 1

  stt:
    image: rg.fr-par.scw.cloud/namespace-unruffled-tereshkova/${DOMAIN}-moshi-server:latest
    command: ["worker", "--config", "configs/stt.toml"]
    environment:
      - HF_TOKEN=$HUGGING_FACE_HUB_TOKEN
    volumes:
      - cargo-registry:/root/.cargo/registry
      - moshi-server-target:/app/target
      - uv-cache:/root/.cache/uv
      - hf-cache:/root/.cache/huggingface/hub
      - /scratch/models/:/models
      - stt-logs:/logs
    stop_grace_period: 10s # change if needed
    deploy:
      labels:
        - "prometheus-port=8080"
        # Expose the STT service via Traefik under the /stt-server path
        - "traefik.enable=true"
        - "traefik.http.routers.stt.rule=(Host(`www.${DOMAIN}`) || Host(`${DOMAIN}`)) && PathPrefix(`/stt-server`)"
        - "traefik.http.routers.stt.middlewares=strip-stt"
        - "traefik.http.middlewares.strip-stt.replacepathregex.regex=^/stt-server/(.*)"
        - "traefik.http.middlewares.strip-stt.replacepathregex.replacement=/$$1"
        - "traefik.http.routers.stt.entrypoints=websecure"
        - "traefik.http.routers.stt.tls=true"
        - "traefik.http.routers.stt.tls.certresolver=letsencrypt_resolver"
        - "traefik.http.services.stt.loadbalancer.server.port=8080"
        - "traefik.http.routers.stt.priority=110"
      replicas: 1
      resources:
        limits:
          cpus: "8"
          memory: 16G
        reservations:
          generic_resources:
            - discrete_resource_spec:
                kind: gpu
                value: 1

  voice-cloning:
    image: rg.fr-par.scw.cloud/namespace-unruffled-tereshkova/${DOMAIN}-moshi-server:latest
    command: ["worker", "--config", "configs/voice-cloning.toml"]
    volumes:
      - cargo-registry:/root/.cargo/registry
      - moshi-server-target:/app/target
      - uv-cache:/root/.cache/uv
      - /scratch/models/:/models
      - voice-cloning-logs:/logs
    deploy:
      labels:
        - "prometheus-port=8080"
      replicas: 2
      update_config:
        delay: 60s #it takes a very long time to boot up and we want no downtime
      resources:
        limits:
          cpus: "8"
          memory: 16G

  benchmark-llm:
    image: rg.fr-par.scw.cloud/namespace-unruffled-tereshkova/${DOMAIN}-benchmark-llm:latest
    build:
      context: services/benchmark-llm
    environment:
      - HUGGING_FACE_HUB_TOKEN=$HUGGING_FACE_HUB_TOKEN

  llm:
    image: vllm/vllm-openai:v0.8.5.post1
    # --tensor-parallel-size 4 if multigpu for one replica
    command:
      [
        "--model=${LLM_MODEL}",
        "--max-model-len=8192",
        "--dtype=bfloat16",
      ]
    healthcheck:
      # The very first time it can be VERY slow, because of the download
      # and compilation
      start_period: 10m
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    volumes:
      - "huggingface-cache:/root/.cache/huggingface"
      - vllm-cache:/root/.cache/vllm
    environment:
      - HUGGING_FACE_HUB_TOKEN=$HUGGING_FACE_HUB_TOKEN
    deploy:
      labels:
        - "prometheus-port=8000"
      replicas: 4
      update_config:
        delay: 120s # it takes a very long time to boot up and we want no downtime
      resources:
        reservations:
          generic_resources:
            - discrete_resource_spec:
                kind: gpu
                value: 1 # put more if needed

  # -------------------------------------------------------------------------
  # Monitoring

  prometheus:
    image: rg.fr-par.scw.cloud/namespace-unruffled-tereshkova/${DOMAIN}-prometheus:latest
    build:
      context: services/prometheus
    volumes:
      - prometheus-data:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    user: root
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus-delicious-burrito.${DOMAIN}`)"
        - "traefik.http.routers.prometheus.entrypoints=websecure"
        - "traefik.http.routers.prometheus.tls=true"
        - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt_resolver"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
        - "traefik.http.routers.prometheus.middlewares=traefik-forward-auth"
        - "prometheus-port=9090"
      placement:
        constraints:
          - node.role == manager

  grafana:
    image: rg.fr-par.scw.cloud/namespace-unruffled-tereshkova/${DOMAIN}-grafana:latest
    build:
      context: services/grafana
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`grafana-delicious-burrito.${DOMAIN}`)"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana.tls=true"
        - "traefik.http.routers.grafana.tls.certresolver=letsencrypt_resolver"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
        - "traefik.http.routers.grafana.middlewares=traefik-forward-auth"

  grafana-with-password:
    image: rg.fr-par.scw.cloud/namespace-unruffled-tereshkova/${DOMAIN}-grafana:latest
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana-with-password.rule=Host(`grafana-with-password.${DOMAIN}`)"
        - "traefik.http.middlewares.auth-grafana.basicauth.users=grafana:$$apr1$$wjRp63GU$$T2DyQQmKmFi/.Il.f/7t2."
        - "traefik.http.routers.grafana-with-password.middlewares=auth-grafana"
        - "traefik.http.routers.grafana-with-password.entrypoints=websecure"
        - "traefik.http.routers.grafana-with-password.tls=true"
        - "traefik.http.routers.grafana-with-password.tls.certresolver=letsencrypt_resolver"
        - "traefik.http.services.grafana-with-password.loadbalancer.server.port=3000"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    command: -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    deploy:
      labels:
        - "prometheus-port=8080"
      mode: global

  agent:
    image: portainer/agent:lts
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer-ce:lts
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - portainer_data:/data
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.portainer.rule=Host(`portainer-delicious-burrito.${DOMAIN}`)"
        - "traefik.http.routers.portainer.entrypoints=websecure"
        - "traefik.http.routers.portainer.tls=true"
        - "traefik.http.routers.portainer.tls.certresolver=letsencrypt_resolver"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
        - "traefik.http.routers.portainer.middlewares=traefik-forward-auth"
      placement:
        constraints: [node.role == manager]

  debugger:
    image: rg.fr-par.scw.cloud/namespace-unruffled-tereshkova/${DOMAIN}-debugger:latest
    command: ["sleep", "infinity"]
    build:
      context: services/debugger
    volumes:
      - /tmp:/tmp

  traefik-forward-auth:
    image: thomseddon/traefik-forward-auth:2
    environment:
      - PROVIDERS_GOOGLE_CLIENT_ID=1019173417489-oa1f0nrup1lc5jrcpqkfln0drpr23sk6.apps.googleusercontent.com
      - PROVIDERS_GOOGLE_CLIENT_SECRET=$PROVIDERS_GOOGLE_CLIENT_SECRET
      - SECRET=$PROVIDERS_GOOGLE_CLIENT_SECRET
      - DOMAIN=kyutai.org
      - LOG_LEVEL=debug
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.middlewares.traefik-forward-auth.forwardauth.address=http://traefik-forward-auth:4181"
        - "traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders=X-Forwarded-User"
        - "traefik.http.services.traefik-forward-auth.loadbalancer.server.port=4181"

  # -------------------------------------------------------------------------
  # Centralized storage

  redis:
    image: redis:latest

networks:
  default:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"

volumes:
  cargo-registry:
  moshi-server-target:
  uv-cache:
  hf-cache:
  voice-cloning-logs:
  letsencrypt:
  prometheus-data:
  huggingface-cache:
  models-storage:
  portainer_data:
  tts-logs: {}
  stt-logs: {}
  vllm-cache: {}
